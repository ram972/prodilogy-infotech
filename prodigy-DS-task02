{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "8eea1269",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from IPython.display import Image, display\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "89d959fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>B42</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C148</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass  \\\n",
       "0              1         0       3   \n",
       "1              2         1       1   \n",
       "2              3         1       3   \n",
       "3              4         1       1   \n",
       "4              5         0       3   \n",
       "..           ...       ...     ...   \n",
       "886          887         0       2   \n",
       "887          888         1       1   \n",
       "888          889         0       3   \n",
       "889          890         1       1   \n",
       "890          891         0       3   \n",
       "\n",
       "                                                  Name     Sex   Age  SibSp  \\\n",
       "0                              Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                               Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                             Allen, Mr. William Henry    male  35.0      0   \n",
       "..                                                 ...     ...   ...    ...   \n",
       "886                              Montvila, Rev. Juozas    male  27.0      0   \n",
       "887                       Graham, Miss. Margaret Edith  female  19.0      0   \n",
       "888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n",
       "889                              Behr, Mr. Karl Howell    male  26.0      0   \n",
       "890                                Dooley, Mr. Patrick    male  32.0      0   \n",
       "\n",
       "     Parch            Ticket     Fare Cabin Embarked  \n",
       "0        0         A/5 21171   7.2500   NaN        S  \n",
       "1        0          PC 17599  71.2833   C85        C  \n",
       "2        0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3        0            113803  53.1000  C123        S  \n",
       "4        0            373450   8.0500   NaN        S  \n",
       "..     ...               ...      ...   ...      ...  \n",
       "886      0            211536  13.0000   NaN        S  \n",
       "887      0            112053  30.0000   B42        S  \n",
       "888      2        W./C. 6607  23.4500   NaN        S  \n",
       "889      0            111369  30.0000  C148        C  \n",
       "890      0            370376   7.7500   NaN        Q  \n",
       "\n",
       "[891 rows x 12 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df  =  pd.read_csv('train.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "13d3696b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.set_index('PassengerId')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "102b06ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "dt = pd.read_csv('test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "37f05401",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330911</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>363272</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>Myles, Mr. Thomas Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240276</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>Wirz, Mr. Albert</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>315154</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3101298</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>1305</td>\n",
       "      <td>3</td>\n",
       "      <td>Spector, Mr. Woolf</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>A.5. 3236</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>414</th>\n",
       "      <td>1306</td>\n",
       "      <td>1</td>\n",
       "      <td>Oliva y Ocana, Dona. Fermina</td>\n",
       "      <td>female</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17758</td>\n",
       "      <td>108.9000</td>\n",
       "      <td>C105</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>415</th>\n",
       "      <td>1307</td>\n",
       "      <td>3</td>\n",
       "      <td>Saether, Mr. Simon Sivertsen</td>\n",
       "      <td>male</td>\n",
       "      <td>38.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>SOTON/O.Q. 3101262</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>416</th>\n",
       "      <td>1308</td>\n",
       "      <td>3</td>\n",
       "      <td>Ware, Mr. Frederick</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>359309</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417</th>\n",
       "      <td>1309</td>\n",
       "      <td>3</td>\n",
       "      <td>Peter, Master. Michael J</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2668</td>\n",
       "      <td>22.3583</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>418 rows Ã— 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Pclass                                          Name  \\\n",
       "0            892       3                              Kelly, Mr. James   \n",
       "1            893       3              Wilkes, Mrs. James (Ellen Needs)   \n",
       "2            894       2                     Myles, Mr. Thomas Francis   \n",
       "3            895       3                              Wirz, Mr. Albert   \n",
       "4            896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)   \n",
       "..           ...     ...                                           ...   \n",
       "413         1305       3                            Spector, Mr. Woolf   \n",
       "414         1306       1                  Oliva y Ocana, Dona. Fermina   \n",
       "415         1307       3                  Saether, Mr. Simon Sivertsen   \n",
       "416         1308       3                           Ware, Mr. Frederick   \n",
       "417         1309       3                      Peter, Master. Michael J   \n",
       "\n",
       "        Sex   Age  SibSp  Parch              Ticket      Fare Cabin Embarked  \n",
       "0      male  34.5      0      0              330911    7.8292   NaN        Q  \n",
       "1    female  47.0      1      0              363272    7.0000   NaN        S  \n",
       "2      male  62.0      0      0              240276    9.6875   NaN        Q  \n",
       "3      male  27.0      0      0              315154    8.6625   NaN        S  \n",
       "4    female  22.0      1      1             3101298   12.2875   NaN        S  \n",
       "..      ...   ...    ...    ...                 ...       ...   ...      ...  \n",
       "413    male   NaN      0      0           A.5. 3236    8.0500   NaN        S  \n",
       "414  female  39.0      0      0            PC 17758  108.9000  C105        C  \n",
       "415    male  38.5      0      0  SOTON/O.Q. 3101262    7.2500   NaN        S  \n",
       "416    male   NaN      0      0              359309    8.0500   NaN        S  \n",
       "417    male   NaN      1      1                2668   22.3583   NaN        C  \n",
       "\n",
       "[418 rows x 11 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "acaaa069",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330911</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>363272</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>Myles, Mr. Thomas Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240276</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>Wirz, Mr. Albert</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>315154</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3101298</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass                                          Name     Sex  \\\n",
       "0          892       3                              Kelly, Mr. James    male   \n",
       "1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n",
       "2          894       2                     Myles, Mr. Thomas Francis    male   \n",
       "3          895       3                              Wirz, Mr. Albert    male   \n",
       "4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n",
       "\n",
       "    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n",
       "0  34.5      0      0   330911   7.8292   NaN        Q  \n",
       "1  47.0      1      0   363272   7.0000   NaN        S  \n",
       "2  62.0      0      0   240276   9.6875   NaN        Q  \n",
       "3  27.0      0      0   315154   8.6625   NaN        S  \n",
       "4  22.0      1      1  3101298  12.2875   NaN        S  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "86ec20f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Survived  Pclass  \\\n",
       "PassengerId                     \n",
       "1                   0       3   \n",
       "2                   1       1   \n",
       "3                   1       3   \n",
       "4                   1       1   \n",
       "5                   0       3   \n",
       "\n",
       "                                                          Name     Sex   Age  \\\n",
       "PassengerId                                                                    \n",
       "1                                      Braund, Mr. Owen Harris    male  22.0   \n",
       "2            Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0   \n",
       "3                                       Heikkinen, Miss. Laina  female  26.0   \n",
       "4                 Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0   \n",
       "5                                     Allen, Mr. William Henry    male  35.0   \n",
       "\n",
       "             SibSp  Parch            Ticket     Fare Cabin Embarked  \n",
       "PassengerId                                                          \n",
       "1                1      0         A/5 21171   7.2500   NaN        S  \n",
       "2                1      0          PC 17599  71.2833   C85        C  \n",
       "3                0      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "4                1      0            113803  53.1000  C123        S  \n",
       "5                0      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e8285296",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                0\n",
       "Survived    int64\n",
       "Pclass      int64\n",
       "Name       object\n",
       "Sex        object\n",
       "Age       float64\n",
       "SibSp       int64\n",
       "Parch       int64\n",
       "Ticket     object\n",
       "Fare      float64\n",
       "Cabin      object\n",
       "Embarked   object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datadict = pd.DataFrame(df.dtypes)\n",
    "datadict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "aedc2a5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>MissingVal</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>float64</td>\n",
       "      <td>177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>float64</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>object</td>\n",
       "      <td>687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>object</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                0  MissingVal\n",
       "Survived    int64           0\n",
       "Pclass      int64           0\n",
       "Name       object           0\n",
       "Sex        object           0\n",
       "Age       float64         177\n",
       "SibSp       int64           0\n",
       "Parch       int64           0\n",
       "Ticket     object           0\n",
       "Fare      float64           0\n",
       "Cabin      object         687\n",
       "Embarked   object           2"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datadict['MissingVal'] = df.isnull().sum()\n",
    "datadict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1f6ec790",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>MissingVal</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>float64</td>\n",
       "      <td>177</td>\n",
       "      <td>714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>float64</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>object</td>\n",
       "      <td>687</td>\n",
       "      <td>204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>object</td>\n",
       "      <td>2</td>\n",
       "      <td>889</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                0  MissingVal  Count\n",
       "Survived    int64           0    891\n",
       "Pclass      int64           0    891\n",
       "Name       object           0    891\n",
       "Sex        object           0    891\n",
       "Age       float64         177    714\n",
       "SibSp       int64           0    891\n",
       "Parch       int64           0    891\n",
       "Ticket     object           0    891\n",
       "Fare      float64           0    891\n",
       "Cabin      object         687    204\n",
       "Embarked   object           2    889"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datadict['Count']=df.count()\n",
    "datadict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "115308cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DataType</th>\n",
       "      <th>MissingVal</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>float64</td>\n",
       "      <td>177</td>\n",
       "      <td>714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>float64</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>object</td>\n",
       "      <td>687</td>\n",
       "      <td>204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>object</td>\n",
       "      <td>2</td>\n",
       "      <td>889</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         DataType  MissingVal  Count\n",
       "Survived    int64           0    891\n",
       "Pclass      int64           0    891\n",
       "Name       object           0    891\n",
       "Sex        object           0    891\n",
       "Age       float64         177    714\n",
       "SibSp       int64           0    891\n",
       "Parch       int64           0    891\n",
       "Ticket     object           0    891\n",
       "Fare      float64           0    891\n",
       "Cabin      object         687    204\n",
       "Embarked   object           2    889"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datadict = datadict.rename(columns={0:'DataType'})\n",
    "datadict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "00d86b88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DataType</th>\n",
       "      <th>MissingVal</th>\n",
       "      <th>Count</th>\n",
       "      <th>NUnique</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>float64</td>\n",
       "      <td>177</td>\n",
       "      <td>714</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "      <td>681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>float64</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "      <td>248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>object</td>\n",
       "      <td>687</td>\n",
       "      <td>204</td>\n",
       "      <td>147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>object</td>\n",
       "      <td>2</td>\n",
       "      <td>889</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         DataType  MissingVal  Count  NUnique\n",
       "Survived    int64           0    891        2\n",
       "Pclass      int64           0    891        3\n",
       "Name       object           0    891      891\n",
       "Sex        object           0    891        2\n",
       "Age       float64         177    714       88\n",
       "SibSp       int64           0    891        7\n",
       "Parch       int64           0    891        7\n",
       "Ticket     object           0    891      681\n",
       "Fare      float64           0    891      248\n",
       "Cabin      object         687    204      147\n",
       "Embarked   object           2    889        3"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe(include=['object'])\n",
    "datadict['NUnique']=df.nunique()\n",
    "datadict\n",
    "datadict['Count']=df.count()\n",
    "datadict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "906ae9af",
   "metadata": {},
   "outputs": [],
   "source": [
    "#https://www.kaggle.com/code/aselad/exploratory-data-analysis-on-the-titanic-dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d3066a71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DataType</th>\n",
       "      <th>MissingVal</th>\n",
       "      <th>Count</th>\n",
       "      <th>NUnique</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>float64</td>\n",
       "      <td>177</td>\n",
       "      <td>714</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "      <td>681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>float64</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "      <td>248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>object</td>\n",
       "      <td>687</td>\n",
       "      <td>204</td>\n",
       "      <td>147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>object</td>\n",
       "      <td>2</td>\n",
       "      <td>889</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         DataType  MissingVal  Count  NUnique\n",
       "Survived    int64           0    891        2\n",
       "Pclass      int64           0    891        3\n",
       "Name       object           0    891      891\n",
       "Sex        object           0    891        2\n",
       "Age       float64         177    714       88\n",
       "SibSp       int64           0    891        7\n",
       "Parch       int64           0    891        7\n",
       "Ticket     object           0    891      681\n",
       "Fare      float64           0    891      248\n",
       "Cabin      object         687    204      147\n",
       "Embarked   object           2    889        3"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datadict = datadict.rename(columns={0:'DataType'})\n",
    "datadict\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a07b12b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891</td>\n",
       "      <td>891</td>\n",
       "      <td>891</td>\n",
       "      <td>204</td>\n",
       "      <td>889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>891</td>\n",
       "      <td>2</td>\n",
       "      <td>681</td>\n",
       "      <td>147</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>347082</td>\n",
       "      <td>B96 B98</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>577</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>644</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           Name   Sex  Ticket    Cabin Embarked\n",
       "count                       891   891     891      204      889\n",
       "unique                      891     2     681      147        3\n",
       "top     Braund, Mr. Owen Harris  male  347082  B96 B98        S\n",
       "freq                          1   577       7        4      644"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Survived.value_counts(normalize=True)\n",
    "df.describe(include=['object'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "08341e6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Survived      Pclass         Age       SibSp       Parch        Fare\n",
       "count  891.000000  891.000000  714.000000  891.000000  891.000000  891.000000\n",
       "mean     0.383838    2.308642   29.699118    0.523008    0.381594   32.204208\n",
       "std      0.486592    0.836071   14.526497    1.102743    0.806057   49.693429\n",
       "min      0.000000    1.000000    0.420000    0.000000    0.000000    0.000000\n",
       "25%      0.000000    2.000000   20.125000    0.000000    0.000000    7.910400\n",
       "50%      0.000000    3.000000   28.000000    0.000000    0.000000   14.454200\n",
       "75%      1.000000    3.000000   38.000000    1.000000    0.000000   31.000000\n",
       "max      1.000000    3.000000   80.000000    8.000000    6.000000  512.329200"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datadict['MissingVal'] = df.isnull().sum()\n",
    "datadict\n",
    "df.describe(include=['number'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2f669824",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Survived', ylabel='Fare'>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1600x1000 with 8 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "figbi, axesbi = plt.subplots(2, 4, figsize=(16, 10))\n",
    "df.groupby('Pclass')['Survived'].mean().plot(kind='barh',ax=axesbi[0,0],xlim=[0,1])\n",
    "df.groupby('SibSp')['Survived'].mean().plot(kind='barh',ax=axesbi[0,1],xlim=[0,1])\n",
    "df.groupby('Parch')['Survived'].mean().plot(kind='barh',ax=axesbi[0,2],xlim=[0,1])\n",
    "df.groupby('Sex')['Survived'].mean().plot(kind='barh',ax=axesbi[0,3],xlim=[0,1])\n",
    "df.groupby('Embarked')['Survived'].mean().plot(kind='barh',ax=axesbi[1,0],xlim=[0,1])\n",
    "sns.boxplot(x=\"Survived\", y=\"Age\", data=df,ax=axesbi[1,1])\n",
    "sns.boxplot(x=\"Survived\", y=\"Fare\", data=df,ax=axesbi[1,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d1220e55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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CA+sQ3hgHSiccbI5ERERkULskSIiIiJSiIEUERERkUIMpIiIiIgUYiBFREREpBADKSIiIiKFGEgRERERKcRAioiIiEghBlLoW7TYarWCKbWIiCiasb1THwMpAK2trTCbzWhtbQ11UYiIiAYM2zv1MZAiIiIiUoiBFBEREZFCDKSIiIiIFGIgRURERKQQAykiIiIihRhIERERESnEQIqIiIhIIQZSRERERAoxkCIiIiJSiIEUERERkUIMpIiIiIgUYiBFREREpBADKSIiIiKFGEgRERERKcRAioiIiEghXagLQESD65i1C83tdli7epBi0iEtwYB4XRwa2+ywdnUjxaRHRqIB5gRDqItKRBT2GEgRxZCapnYs3ViJ7VVNzm2TCzNw67RCzH9lJzrsDgDAlKIMPH7VGOSmmkJVVCKiiMChPaIYccza5RVEAcC2qkY8/5/DmF9W4Nz28eFG3LthDywd9sEuJhFRRGEgRRQjmtvtXkGUaHtVE0ryUt22fXy4EY1tDKSIolF3d3eoixA1GEgRxQhrV4/fx209vV7bWrv4ZUsUjQ4ePBjqIkQNBlJEMSIl3v+USKPO++sgOV4/UMUhIooKDKSIYkRaogFlhemSj5UWpqOitsVt25SiDGQk8c49IiJ/GEgRxYislHgsv6LYK5iaXJiBRRcWYU15tXPblKIMPHHVGKZAICIKQCMIghDqQoSa1WqF2WyGxWJBSkpKqItDNKDc8kjF65CWeDKPVGtXN5Lj9chIYh4pomgktneNjY1IT5fuoabghLRHatmyZdBoNG5/2dnZzscFQcCyZcuQm5sLk8mECy64APv27XM7hs1mw6JFi5CRkYHExERcdtll+O677wa7KkQRIyslHiNzUnBuwRCMzElBVko8zAkGDM9Mwtn5aRiemcQgiijK6fWc/6iWkA/tnXXWWairq3P+VVZWOh978skn8fTTT2PlypXYuXMnsrOzcdFFF6G1tdW5z+LFi7Fx40asX78e5eXlaGtrw6xZs+BwOEJRHSIiIoohIc9srtPp3HqhRIIg4Nlnn8X999+PK6+8EgDwyiuvICsrC6+//jpuueUWWCwWrF69Gn/9618xY8YMAMCrr76KvLw8fPTRR7jkkksGtS5EREQUW0LeI3X48GHk5uaioKAA1157Lb755hsAQHV1Nerr63HxxRc79zUajZg6dSp27NgBANi1axe6u7vd9snNzcXo0aOd+xARERENlJD2SE2cOBF/+ctfcMYZZ+DYsWN49NFHMWnSJOzbtw/19fUAgKysLLfnZGVl4ciRIwCA+vp6GAwGpKWlee0jPl+KzWaDzWZz/t9qtapVJSIiorDB9m7ghbRHaubMmbjqqqtQXFyMGTNm4P333wfQN4Qn0mg0bs8RBMFrm6dA+6xYsQJms9n5l5eX149aEBERhSe2dwMv5EN7rhITE1FcXIzDhw8750159iw1NDQ4e6mys7Nht9vR3Nzscx8pS5cuhcVicf7V1taqXBMiIqLQY3s38MIqkLLZbDhw4ABycnJQUFCA7OxsbN682fm43W7H1q1bMWnSJADAuHHjoNfr3fapq6vD3r17nftIMRqNSElJcfsjIiKKNmzvBl5I50jdfffd+NGPfoT8/Hw0NDTg0UcfhdVqxdy5c6HRaLB48WIsX74cRUVFKCoqwvLly5GQkIA5c+YAAMxmM2666SbcddddSE9Px5AhQ3D33Xc7hwqJiIiIBlJIA6nvvvsOs2fPRmNjI4YOHYrzzjsPn3zyCU477TQAwD333IPOzk4sWLAAzc3NmDhxIj788EMkJyc7j/HMM89Ap9Ph6quvRmdnJ6ZPn461a9dCq9WGqlpEREQUI7hEDLhEDBERxQa2d+oLqzlSRERERJGEgRQRERGRQgykiIiIiBRiIEVERESkEAMpIiIiIoUYSBEREREpxECKiIiISCEGUkREREQKMZAiIiIiUoiBFBEREZFCDKSIiIiIFGIgRURERKQQAykiIiIihRhIERERESnEQIqIiIhIIQZSRERERAoxkCIiIiJSiIEUERERkUIMpIiIiIgUYiBFREREpBADKSIiIiKFGEgRERERKcRAioiIiEghBlJERERECjGQIiIiIlKIgRQRERGRQgykiIiIiBRiIEVERESkEAMpIiIiIoUYSBEREREpxECKiIiISCEGUkREREQKMZAiIiIiUoiBFBEREZFCDKSIiIiIFGIgRURERKQQAykiIiIihRhIERERESnEQIqIiIhIIQZSRERERAoxkCIiIiJSiIEUERERkUIMpIiIiIgUYiBFREREpBADKSIiIiKFGEgRERERKcRAioiIiEghBlJERERECjGQIiIiIlKIgRQRERGRQgykiIiIiBRiIEVERESkEAMpIiIiIoUYSBEREREpxECKiIiISCEGUkREREQKMZAiIiIiUoiBFBEREZFCDKSIiIiIFGIgRURERKQQAykiIiIihRhIERERESnEQIqIiIhIIQZSRERERAoxkCIiIiJSiIEUERERkUIMpIiIiIgUCptAasWKFdBoNFi8eLFzmyAIWLZsGXJzc2EymXDBBRdg3759bs+z2WxYtGgRMjIykJiYiMsuuwzffffdIJeeiIiIYlFYBFI7d+7Eiy++iDFjxrhtf/LJJ/H0009j5cqV2LlzJ7Kzs3HRRRehtbXVuc/ixYuxceNGrF+/HuXl5Whra8OsWbPgcDgGuxpEREQUY0IeSLW1teG6667DSy+9hLS0NOd2QRDw7LPP4v7778eVV16J0aNH45VXXkFHRwdef/11AIDFYsHq1avx1FNPYcaMGSgpKcGrr76KyspKfPTRR6GqEhEREcWIkAdSt956Ky699FLMmDHDbXt1dTXq6+tx8cUXO7cZjUZMnToVO3bsAADs2rUL3d3dbvvk5uZi9OjRzn2k2Gw2WK1Wtz8iIqJow/Zu4IU0kFq/fj2++OILrFixwuux+vp6AEBWVpbb9qysLOdj9fX1MBgMbj1ZnvtIWbFiBcxms/MvLy+vv1UhIiIKO2zvBl7IAqna2lrcfvvtePXVVxEfH+9zP41G4/Z/QRC8tnkKtM/SpUthsVicf7W1tcEVnoiIKAKwvRt4ulC98K5du9DQ0IBx48Y5tzkcDnz88cdYuXIlDh06BKCv1yknJ8e5T0NDg7OXKjs7G3a7Hc3NzW69Ug0NDZg0aZLP1zYajTAajWpXiYiIKKywvRt4IeuRmj59OiorK7F7927n3/jx43Hddddh9+7dGDZsGLKzs7F582bnc+x2O7Zu3eoMksaNGwe9Xu+2T11dHfbu3es3kCIiIiJSQ8h6pJKTkzF69Gi3bYmJiUhPT3duX7x4MZYvX46ioiIUFRVh+fLlSEhIwJw5cwAAZrMZN910E+666y6kp6djyJAhuPvuu1FcXOw1eZ2IiIhIbSELpOS455570NnZiQULFqC5uRkTJ07Ehx9+iOTkZOc+zzzzDHQ6Ha6++mp0dnZi+vTpWLt2LbRabQhLTkRERLFAIwiCEOpChJrVaoXZbIbFYkFKSkqoi0NERDQg2N6pL+R5pIiIiIgiFQMpIiIiIoUYSBEREREpxECKiIiISCEGUkREREQKMZAiIiIiUoiBFBEREZFCDKSIiIiIFGIgRURERKQQAykiIiIihRhIERERESnEQIqIiIhIIQZSRERERAoxkCIiIiJSiIEUERERkUIMpIiIiIgUYiBFREREpBADKSIiIiKFGEgRERERKcRAioiIiEghBlJERERECjGQIiIiIlKIgRQRERGRQgykiIiIiBRiIEVERESkEAMpIiIiIoUYSBEREREpxECKiIiISCEGUkREREQKMZAiIiIiUoiBFBEREZFCDKSIiIiIFGIgRURERKQQAykiIiIihRhIERERESnEQIqIiIhIIQZSRERERAoxkCIiIiJSiIEUERERkUIMpIiIiIgUYiBFREREpBADKSIiIiKFGEgRERERKcRAioiIiEghBlJERERECjGQIiIiIlKIgRQRERGRQgykiIiIiBRiIEVERESkEAMpIiIiIoUYSBEREREpxECKiIiISCEGUkREREQKMZAiIiIiUoiBFBEREZFCDKSIiIiIFGIgRURERKQQAykiIiIihRhIERERESnEQIqIiIhIIQZSRERERAoxkCIiIiJSiIEUERERkUIMpIiIiIgUYiBFREREpBADKSIiIiKFQhpIvfDCCxgzZgxSUlKQkpKC888/Hx988IHzcUEQsGzZMuTm5sJkMuGCCy7Avn373I5hs9mwaNEiZGRkIDExEZdddhm+++67wa4KERERxaCQBlKnnnoqHn/8cXz++ef4/PPPceGFF+LHP/6xM1h68skn8fTTT2PlypXYuXMnsrOzcdFFF6G1tdV5jMWLF2Pjxo1Yv349ysvL0dbWhlmzZsHhcISqWkRERBQjNIIgCKEuhKshQ4bgd7/7HebPn4/c3FwsXrwYS5YsAdDX+5SVlYUnnngCt9xyCywWC4YOHYq//vWvuOaaawAAR48eRV5eHjZt2oRLLrlE1mtarVaYzWZYLBakpKQMWN2IiIhCie2d+sJmjpTD4cD69evR3t6O888/H9XV1aivr8fFF1/s3MdoNGLq1KnYsWMHAGDXrl3o7u522yc3NxejR4927kNEREQ0UHShLkBlZSXOP/98dHV1ISkpCRs3bsSoUaOcgVBWVpbb/llZWThy5AgAoL6+HgaDAWlpaV771NfX+3xNm80Gm83m/L/ValWrOkRERGGD7d3AC3mP1IgRI7B792588skn+NWvfoW5c+di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VgDhX34A6OnpwQMPPICCggKYTCYMGzYMv/3tb9Hb2+vcJxLqQUESqN/Wr18v6PV64aWXXhL2798v3H777UJiYqJw5MiRUBdN0qZNm4T7779f2LBhgwBA2Lhxo9vjjz/+uJCcnCxs2LBBqKysFK655hohJydHsFqtoSmwhEsuuUR4+eWXhb179wq7d+8WLr30UiE/P19oa2tz7hPu9XjnnXeE999/Xzh06JBw6NAh4b777hP0er2wd+9eQRDCv/yePvvsM+H0008XxowZI9x+++3O7eFej4ceekg466yzhLq6OudfQ0OD8/FwL78gCMLx48eF0047TZg3b57w6aefCtXV1cJHH30kVFVVOfcJ93o0NDS4XYPNmzcLAIT//Oc/giCEf/kFQRAeffRRIT09XXjvvfeE6upq4e9//7uQlJQkPPvss859IqEeFBwGUio499xzhV/+8pdu20aOHCnce++9ISqRfJ6BVG9vr5CdnS08/vjjzm1dXV2C2WwW/u///i8EJZSnoaFBACBs3bpVEITIrUdaWprw5z//OeLK39raKhQVFQmbN28Wpk6d6gykIqEeDz30kDB27FjJxyKh/IIgCEuWLBHKysp8Ph4p9XB1++23C8OHDxd6e3sjpvyXXnqpMH/+fLdtV155pXD99dcLghCZ14EC49BeP9ntduzatQsXX3yx2/aLL74YO3bsCFGplKuurkZ9fb1bfYxGI6ZOnRrW9bFYLACAIUOGAIi8ejgcDqxfvx7t7e04//zzI678t956Ky699FLMmDHDbXuk1OPw4cPIzc1FQUEBrr32WnzzzTcAIqf877zzDsaPH4+f/vSnyMzMRElJCV566SXn45FSD5Hdbserr76K+fPnQ6PRREz5y8rK8O9//xtfffUVAODLL79EeXk5fvjDHwKIvOtA8nCtvX5qbGyEw+FAVlaW2/asrCzU19eHqFTKiWWWqs+RI0dCUaSABEHAnXfeibKyMowePRpA5NSjsrIS559/Prq6upCUlISNGzdi1KhRzi/VcC8/AKxfvx5ffPEFdu7c6fVYJFyHiRMn4i9/+QvOOOMMHDt2DI8++igmTZqEffv2RUT5AeCbb77BCy+8gDvvvBP33XcfPvvsM9x2220wGo244YYbIqYeorfeegstLS2YN28egMh4HwHAkiVLYLFYMHLkSGi1WjgcDjz22GOYPXs2gMipBwWHgZRKPFfRFgQholfWjqT6LFy4EHv27EF5ebnXY+FejxEjRmD37t1oaWnBhg0bMHfuXGzdutX5eLiXv7a2Frfffjs+/PBDxMfH+9wvnOsxc+ZM57+Li4tx/vnnY/jw4XjllVdw3nnnAQjv8gNAb28vxo8fj+XLlwMASkpKsG/fPrzwwgu44YYbnPuFez1Eq1evxsyZM5Gbm+u2PdzL/8Ybb+DVV1/F66+/jrPOOgu7d+/G4sWLkZubi7lz5zr3C/d6UHA4tNdPGRkZ0Gq1Xr1PDQ0NXr86IoF4t1Kk1GfRokV455138J///Aennnqqc3uk1MNgMKCwsBDjx4/HihUrMHbsWPzhD3+ImPLv2rULDQ0NGDduHHQ6HXQ6HbZu3YrnnnsOOp3OWdZwr4erxMREFBcX4/DhwxFzHXJycjBq1Ci3bWeeeSZqamoARM7nAQCOHDmCjz76CDfffLNzW6SU/9e//jXuvfdeXHvttSguLsbPfvYz3HHHHVixYgWAyKkHBYeBVD8ZDAaMGzcOmzdvdtu+efNmTJo0KUSlUq6goADZ2dlu9bHb7di6dWtY1UcQBCxcuBBvvvkmtmzZgoKCArfHI6UengRBgM1mi5jyT58+HZWVldi9e7fzb/z48bjuuuuwe/duDBs2LCLq4cpms+HAgQPIycmJmOtQWlrqlf7jq6++wmmnnQYgsj4PL7/8MjIzM3HppZc6t0VK+Ts6OhAX596sarVaZ/qDSKkHBSk0c9yji5j+YPXq1cL+/fuFxYsXC4mJicK3334b6qJJam1tFSoqKoSKigoBgPD0008LFRUVznQNjz/+uGA2m4U333xTqKysFGbPnh12t+f+6le/Esxms/Df//7X7Zbpjo4O5z7hXo+lS5cKH3/8sVBdXS3s2bNHuO+++4S4uDjhww8/FAQh/Mvvi+tde4IQ/vW46667hP/+97/CN998I3zyySfCrFmzhOTkZOfnN9zLLwh9qSd0Op3w2GOPCYcPHxZee+01ISEhQXj11Ved+0RCPRwOh5Cfny8sWbLE67FIKP/cuXOFU045xZn+4M033xQyMjKEe+65x7lPJNSDgsNASiV//OMfhdNOO00wGAzCOeec47wNPxz95z//EQB4/c2dO1cQhL5bdB966CEhOztbMBqNwpQpU4TKysrQFtqDVPkBCC+//LJzn3Cvx/z5853vmaFDhwrTp093BlGCEP7l98UzkAr3eoh5fPR6vZCbmytceeWVwr59+5yPh3v5Re+++64wevRowWg0CiNHjhRefPFFt8cjoR7/+te/BADCoUOHvB6LhPJbrVbh9ttvF/Lz84X4+Hhh2LBhwv333y/YbDbnPpFQDwqORhAEISRdYUREREQRjnOkiIiIiBRiIEVERESkEAMpIiIiIoUYSBEREREpxECKiIiISCEGUkREREQKMZAiIiIiUoiBFBEREZFCDKSIiIiIFGIgRURB27FjB7RaLX7wgx+EuihERCHFJWKIKGg333wzkpKS8Oc//xn79+9Hfn5+qItERBQS7JEioqC0t7fjb3/7G371q19h1qxZWLt2rdvj77zzDoqKimAymTBt2jS88sor0Gg0aGlpce6zY8cOTJkyBSaTCXl5ebjtttvQ3t4+uBUhIlIBAykiCsobb7yBESNGYMSIEbj++uvx8ssvQ+zY/vbbb/GTn/wEl19+OXbv3o1bbrkF999/v9vzKysrcckll+DKK6/Enj178MYbb6C8vBwLFy4MRXWIiPqFQ3tEFJTS0lJcffXVuP3229HT04OcnBysW7cOM2bMwL333ov3338flZWVzv0feOABPPbYY2hubkZqaipuuOEGmEwm/OlPf3LuU15ejqlTp6K9vR3x8fGhqBYRkSLskSIi2Q4dOoTPPvsM1157LQBAp9PhmmuuwZo1a5yPT5gwwe055557rtv/d+3ahbVr1yIpKcn5d8kll6C3txfV1dWDUxEiIpXoQl0AIoocq1evRk9PD0455RTnNkEQoNfr0dzcDEEQoNFo3J7j2end29uLW265BbfddpvX8TlpnYgiDQMpIpKlp6cHf/nLX/DUU0/h4osvdnvsqquuwmuvvYaRI0di06ZNbo99/vnnbv8/55xzsG/fPhQWFg54mYmIBhrnSBGRLG+99RauueYaNDQ0wGw2uz12//33Y9OmTXjzzTcxYsQI3HHHHbjpppuwe/du3HXXXfjuu+/Q0tICs9mMPXv24LzzzsONN96In//850hMTMSBAwewefNmPP/88yGqHRGRMpwjRUSyrF69GjNmzPAKooC+Hqndu3ejubkZ//jHP/Dmm29izJgxeOGFF5x37RmNRgDAmDFjsHXrVhw+fBiTJ09GSUkJHnzwQeTk5AxqfYiI1MAeKSIaUI899hj+7//+D7W1taEuChGR6jhHiohUtWrVKkyYMAHp6enYvn07fve73zFHFBFFLQZSRKSqw4cP49FHH8Xx48eRn5+Pu+66C0uXLg11sYiIBgSH9oiIiIgU4mRzIiIiIoUYSBEREREpxECKiIiISCEGUkREREQKMZAiIiIiUoiBFBEREZFCDKSIiIiIFGIgRURERKQQAykiIiIihf4/leRPKnRtE60AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 600x600 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.jointplot(x=\"Age\", y=\"Fare\", data=df);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0108d3ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##Combining plots\n",
    "# check sns.violinplot documentation\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "sns.violinplot(x='Sex', y='Fare', data=df, inner=\"stick\", color='yellow')\n",
    "sns.stripplot(x='Sex', y='Fare', data=df, size=4,jitter=True)\n",
    "#plt.ylabel=('tip ($)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e4fcb8d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ram Gore\\AppData\\Local\\Temp\\ipykernel_10868\\1935561399.py:4: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
      "  corr = df.corr()\n",
      "C:\\Users\\Ram Gore\\AppData\\Local\\Temp\\ipykernel_10868\\1935561399.py:6: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  mask=np.zeros_like(corr, dtype=np.bool),\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "f, ax = plt.subplots(figsize=(10, 8))\n",
    "corr = df.corr()\n",
    "sns.heatmap(corr,\n",
    "            mask=np.zeros_like(corr, dtype=np.bool), \n",
    "            cmap=sns.diverging_palette(220, 10, as_cmap=True),\n",
    "            square=True, ax=ax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "8a6c21be",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Name_len']=df.Name.str.len()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "a47d3ce5",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Ticket_First']=df.Ticket.str[0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a48d8273",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['FamilyCount']=df.SibSp+df.Parch\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "56631180",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Cabin_First']=df.Cabin.str[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "e225e400",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['title'] = df.Name.str.extract('\\, ([A-Z][^ ]*\\.)',expand=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "294aa1a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Mr.</td>\n",
       "      <td>517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Miss.</td>\n",
       "      <td>182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mrs.</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Master.</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Dr.</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Rev.</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Major.</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Mlle.</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Col.</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Don.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Mme.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Ms.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Lady.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Sir.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Capt.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Jonkheer.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        index  title\n",
       "0         Mr.    517\n",
       "1       Miss.    182\n",
       "2        Mrs.    125\n",
       "3     Master.     40\n",
       "4         Dr.      7\n",
       "5        Rev.      6\n",
       "6      Major.      2\n",
       "7       Mlle.      2\n",
       "8        Col.      2\n",
       "9        Don.      1\n",
       "10       Mme.      1\n",
       "11        Ms.      1\n",
       "12      Lady.      1\n",
       "13       Sir.      1\n",
       "14      Capt.      1\n",
       "15  Jonkheer.      1"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.title.value_counts().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "77793f00",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n"
     ]
    }
   ],
   "source": [
    "print((df.Fare == 0).sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "1314269c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# mark zero values as missing or NaN\n",
    "df.Fare = df.Fare.replace(0, np.NaN)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "24e88cc2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "# validate to see if there are no more zero values\n",
    "print((df.Fare == 0).sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "2275cd4f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Int64Index([180, 264, 272, 278, 303, 414, 467, 482, 598, 634, 675, 733, 807,\n",
       "            816, 823],\n",
       "           dtype='int64', name='PassengerId')"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# keep the index\n",
    "df[df.Fare.isnull()].index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "46bc94e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32.75564988584475"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Fare.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "b8195e4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# impute the missing Fare values with the mean Fare value\n",
    "df.Fare.fillna(df.Fare.mean(),inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "8dbc3f7e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Name_len</th>\n",
       "      <th>Ticket_First</th>\n",
       "      <th>FamilyCount</th>\n",
       "      <th>Cabin_First</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Survived, Pclass, Name, Sex, Age, SibSp, Parch, Ticket, Fare, Cabin, Embarked, Name_len, Ticket_First, FamilyCount, Cabin_First, title]\n",
       "Index: []"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# validate if any null values are present after the imputation\n",
    "df[df.Fare.isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "3b9c6590",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "# we see that there are 0 Zero values\n",
    "print((df.Age == 0).sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "cf2640ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Name_len</th>\n",
       "      <th>Ticket_First</th>\n",
       "      <th>FamilyCount</th>\n",
       "      <th>Cabin_First</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Survived, Pclass, Name, Sex, Age, SibSp, Parch, Ticket, Fare, Cabin, Embarked, Name_len, Ticket_First, FamilyCount, Cabin_First, title]\n",
       "Index: []"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# impute the missing Age values with the mean Fare value\n",
    "df.Age.fillna(df.Age.mean(),inplace=True)\n",
    "# validate if any null values are present after the imputation\n",
    "df[df.Age.isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "eb811697",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7710437710437711"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We see that a majority 77% of the Cabin variable has missing values.\n",
    "# Hence will drop the column from training a machine learnign algorithem\n",
    "df.Cabin.isnull().mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "de29b3e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 891 entries, 1 to 891\n",
      "Data columns (total 16 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   Survived      891 non-null    int64  \n",
      " 1   Pclass        891 non-null    int64  \n",
      " 2   Name          891 non-null    object \n",
      " 3   Sex           891 non-null    object \n",
      " 4   Age           891 non-null    float64\n",
      " 5   SibSp         891 non-null    int64  \n",
      " 6   Parch         891 non-null    int64  \n",
      " 7   Ticket        891 non-null    object \n",
      " 8   Fare          891 non-null    float64\n",
      " 9   Cabin         204 non-null    object \n",
      " 10  Embarked      889 non-null    object \n",
      " 11  Name_len      891 non-null    int64  \n",
      " 12  Ticket_First  891 non-null    object \n",
      " 13  FamilyCount   891 non-null    int64  \n",
      " 14  Cabin_First   204 non-null    object \n",
      " 15  title         890 non-null    object \n",
      "dtypes: float64(2), int64(6), object(8)\n",
      "memory usage: 118.3+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "48fc8dc6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket',\n",
       "       'Fare', 'Cabin', 'Embarked', 'Name_len', 'Ticket_First', 'FamilyCount',\n",
       "       'Cabin_First', 'title'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "9d17081a",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfML = df[['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket',\n",
    "       'Fare', 'Embarked', 'Name_len', 'Ticket_First', 'FamilyCount',\n",
    "       'title']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "46ed6ac2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived        0\n",
       "Pclass          0\n",
       "Name            0\n",
       "Sex             0\n",
       "Age             0\n",
       "SibSp           0\n",
       "Parch           0\n",
       "Ticket          0\n",
       "Fare            0\n",
       "Embarked        0\n",
       "Name_len        0\n",
       "Ticket_First    0\n",
       "FamilyCount     0\n",
       "title           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# drop rows of missing values\n",
    "dfML = dfML.dropna()\n",
    "# check the datafram has any missing values\n",
    "dfML.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "a74e2c00",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import Estimator AND Instantiate estimator class to create an estimator object\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "lr = LogisticRegression()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "ae1de91f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6182432432432432"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_Age = dfML[['Age']].values\n",
    "y = dfML['Survived'].values\n",
    "# Use the fit method to train\n",
    "lr.fit(X_Age,y)\n",
    "# Make a prediction\n",
    "y_predict = lr.predict(X_Age)\n",
    "y_predict[:10]\n",
    "(y == y_predict).mean()\n",
    "#The gender of passenger is a strong predictor and purely predciting based on gender, the model accuracy increased to 78%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "961defcc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6621621621621622"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_Fare = dfML[['Fare']].values\n",
    "y = dfML['Survived'].values\n",
    "# Use the fit method to train\n",
    "lr.fit(X_Fare,y)\n",
    "# Make a prediction\n",
    "y_predict = lr.predict(X_Fare)\n",
    "y_predict[:10]\n",
    "(y == y_predict).mean()\n",
    "#The gender of passenger is a strong predictor and purely predciting based on gender, the model accuracy increased to 78%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "0f085d71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.786036036036036"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_sex = pd.get_dummies(dfML['Sex']).values\n",
    "y = dfML['Survived'].values\n",
    "# Use the fit method to train\n",
    "lr.fit(X_sex, y)\n",
    "# Make a prediction\n",
    "y_predict = lr.predict(X_sex)\n",
    "y_predict[:10]\n",
    "(y == y_predict).mean()\n",
    "#Gender of the passenger seems a strong predictor compared to the PClass of the passenger on Survival"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "7e8582dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6779279279279279"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_pclass = pd.get_dummies(dfML['Pclass']).values\n",
    "y = dfML['Survived'].values\n",
    "lr = LogisticRegression()\n",
    "lr.fit(X_pclass, y)\n",
    "# Make a prediction\n",
    "y_predict = lr.predict(X_pclass)\n",
    "y_predict[:10]\n",
    "(y == y_predict).mean()\n",
    "\n",
    "#Random forest did a good job in predicting the survival with a 97% accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a87909d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
